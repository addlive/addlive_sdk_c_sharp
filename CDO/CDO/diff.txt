diff --git a/CDO/CDO/CloudeoService/CloudeoServiceImpl.cs b/CDO/CDO/CloudeoService/CloudeoServiceImpl.cs
index a4865c8..3097951 100644
--- a/CDO/CDO/CloudeoService/CloudeoServiceImpl.cs
+++ b/CDO/CDO/CloudeoService/CloudeoServiceImpl.cs
@@ -65,7 +65,8 @@ namespace CDO
         /// </summary>
         private cdo_get_device_names_rclbck_t _devsRCallback;
 
-        private cdo_get_screen_capture_srcs_rclbck_t _screenSourceRCallback;
+        private cdo_raw_data_rclbck_t _screenSourceRCallback;
+        private cdo_raw_data_rclbck_t _rawScreenSharingSourcesRCallback;
         /// <summary>
         /// List of all registered CloudeoServiceListener adapters. To prevent 
         /// deallocation when passing delegate to the native code.
@@ -107,7 +108,7 @@ namespace CDO
             _intRCallback = new cdo_int_rclbck_t(intRCallback);
             _devsRCallback = new cdo_get_device_names_rclbck_t(devsRCallback);
             _screenSourceRCallback = 
-                new cdo_get_screen_capture_srcs_rclbck_t(screenCaptureSourcesRClbck);
+                new cdo_raw_data_rclbck_t(screenCaptureSourcesRClbck);
         }
 
         #endregion
@@ -314,8 +315,8 @@ namespace CDO
         {
             if (!isPlatformInitialized<List<ScreenCaptureSource>>(responder))
                 return;
-
-            NativeAPI.cdo_get_screen_capture_sources(_screenSourceRCallback,
+            Console.Error.WriteLine("Getting the screen sharing sources");
+            NativeAPI.cdo_get_screen_capture_sources_raw(_screenSourceRCallback,
                 _platformHandle, saveResponder(responder), thumbWidth);
         }
 
@@ -748,33 +749,38 @@ namespace CDO
         private void screenCaptureSourcesRClbck(IntPtr opaque,
             ref CDOError error, IntPtr sources, UIntPtr size)
         {
-            
-            Responder<List<ScreenCaptureSource>> responder =
-                (Responder<List<ScreenCaptureSource>>)
-                getResponder((uint)opaque);
-            if (error.err_code != 0)
-            {
-                responder.errHandler(error.err_code, error.err_message.body);
-            }
-            List<ScreenCaptureSource> sourcesList =
-                new List<ScreenCaptureSource>();
 
-            var arrayValue = sources;
-            var tableEntrySize = Marshal.SizeOf(typeof(CDOScreenCaptureSource));
-            uint tableSize = (uint)size;
+        }
+        private void screenCaptureSourcesRClbckRaw(IntPtr opaque,
+            ref CDOError error, IntPtr sources, UIntPtr size)
+        {
+            Console.Error.WriteLine("Got data from native. length: " + size);
             ASCIIEncoding enc = new ASCIIEncoding();
-            for (var i = 0; i < tableSize; i++)
+            byte[] sourcesDataArray = new byte[(uint)size];
+            Console.Error.WriteLine("Copying data to the managed buffer");
+            Marshal.Copy(sources, sourcesDataArray, 0, (int)(uint)size);
+            Console.Error.WriteLine("Data copied");
+
+            string jsonData = enc.GetString(sourcesDataArray);
+            Console.Error.WriteLine("String created: " + jsonData);
+            try
             {
-                CDOScreenCaptureSource cur =
-                    (CDOScreenCaptureSource)Marshal.PtrToStructure(
-                    arrayValue, typeof(CDOScreenCaptureSource));
-                
-                sourcesList.Add(
-                    new ScreenCaptureSource(cur.id.body, "", 
-                        enc.GetBytes(cur.imageData)));
-                arrayValue = new IntPtr(arrayValue.ToInt32() + tableEntrySize);
+                LitJson.JsonReader reader = new LitJson.JsonReader(jsonData);
+                Console.Error.WriteLine("Reader created");
+
+                while (reader.Read())
+                {
+                    // we've got now the ObjStart in Value
+                    string type = reader.Value != null ? reader.Value.GetType().ToString() : "no type...";
+                    
+                    Console.Error.WriteLine("Token: " + reader.Token + " type: " + type + " value: " + reader.Value);
+                }
             }
-            responder.resultHandler(sourcesList);
+            catch (Exception e)
+            {
+                Console.Error.WriteLine("Got an exception: " + e.ToString());
+            }
+            
         }
 
 
